#include <glog/logging.h>

#include <cstring>
#include <map>
#include <string>
#include <vector>

#include "boost/algorithm/string.hpp"
#include "caffe/caffe.hpp"
#include "caffe/util/upgrade_proto.hpp"

using std::cout;
using std::endl;
using std::string;

using caffe::BlobProto;
using caffe::Blob3DProto;
using caffe::NetParameter3D;
using caffe::NetParameter;

void update_blob_3d_proto(const Blob3DProto& old_3d_proto, BlobProto* new_proto)
{
	new_proto->clear_shape();
	new_proto->mutable_shape()->add_dim(old_3d_proto.num());
	new_proto->mutable_shape()->add_dim(old_3d_proto.channels());
	new_proto->mutable_shape()->add_dim(old_3d_proto.length());
	new_proto->mutable_shape()->add_dim(old_3d_proto.height());
	new_proto->mutable_shape()->add_dim(old_3d_proto.width());

	new_proto->clear_data();
	new_proto->clear_diff();
	for (int i = 0; i < old_3d_proto.data_size(); i++)
	{
		new_proto->add_data(old_3d_proto.data(i));
	}
}

int main(int argc, char** argv) {
	FLAGS_alsologtostderr = 1;
	if (argc != 3)
	{
		cout << "usage: convert_c3d_model_and_mean.exe c3d_model c3d_mean" << endl;
		return 0;
	}
	std::string model_path = argv[1];
	std::string mean_path = argv[2];

	//convert mean
	Blob3DProto old_mean_proto;
	caffe::ReadProtoFromBinaryFileOrDie(mean_path.c_str(), &old_mean_proto);
	BlobProto new_mean_proto;
	update_blob_3d_proto(old_mean_proto, &new_mean_proto);
	caffe::WriteProtoToBinaryFile(new_mean_proto, "new_sport1m_train16_128_mean.binaryproto");

	//convert model
	NetParameter3D old_param;
	NetParameter new_param;
	caffe::ReadProtoFromBinaryFile(model_path, &old_param);
	caffe::ReadProtoFromBinaryFile(model_path, &new_param);

	return 0;
}